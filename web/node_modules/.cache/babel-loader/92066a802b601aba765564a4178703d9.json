{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { mapGetters, mapActions } from \"vuex\";\nexport default {\n  name: \"ProfileEdit\",\n  data: function data() {\n    return {\n      user: {\n        name: \"\",\n        avatar_url: \"\"\n      },\n      uploadAvatar: \"\",\n      rules: [function (value) {\n        return !value || value.size < 2000000 || \"画像サイズは2MB以下にしてください\";\n      }]\n    };\n  },\n  computed: _objectSpread({}, mapGetters(\"users\", [\"authUser\"])),\n  created: function created() {\n    this.user = Object.assign({}, this.authUser);\n    console.log(this.user);\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions(\"users\", [\"updateUser\"])), {}, {\n    // async handleChange(event) {\n    //   const { valid } = await this.$refs.provider.validate(event);\n    //   if (valid) this.uploadAvatar = event.target.files[0];\n    // },\n    update: function update() {\n      var formData = new FormData();\n      formData.append(\"user[name]\", this.user.name);\n      if (this.uploadAvatar) formData.append(\"user[avatar]\", this.uploadAvatar);\n      try {\n        this.updateUser(formData);\n        this.$router.push({\n          name: \"ProfileIndex\"\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  })\n};","map":{"version":3,"mappings":";;;AAwFA;AAEA;EACAA;EACAC;IACA;MACAC;QACAF;QACAG;MACA;MACAC;MACAC,QACA;QAAA,OACA;MAAA;IAEA;EACA;EAEAC,4BACAC,kCACA;EACAC;IACA;IACAC;EACA;EACAC,yCACAC;IACA;IACA;IACA;IACA;IACAC;MACA;MACAC;MACA;MAEA;QACA;QACA;UAAAb;QAAA;MACA;QACAS;MACA;IACA;EAAA;AAEA","names":["name","data","user","avatar_url","uploadAvatar","rules","computed","mapGetters","created","console","methods","mapActions","update","formData"],"sourceRoot":"app/javascript/pages/profile","sources":["edit.vue"],"sourcesContent":["<template>\n  <div id=\"login-form\" class=\"container w-50 text-center\">\n    <h3>プロフィール編集</h3>\n    <!-- <ValidationObserver v-slot=\"{ handleSubmit }\">\n      <div class=\"form-group text-left\">\n        <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n          <label for=\"name\">ユーザー名</label>\n          <input\n            id=\"name\"\n            v-model=\"user.name\"\n            name=\"ユーザー名\"\n            type=\"text\"\n            class=\"form-control\"\n            placeholder=\"username\"\n          />\n          <span class=\"text-danger\">{{ errors[0] }}</span>\n        </ValidationProvider>\n      </div>\n      <div class=\"form-group text-left\">\n        eslint-disable vue/no-unused-vars\n        <ValidationProvider\n          v-slot=\"{ errors, validate }\"\n          ref=\"provider\"\n          name=\"プロフィール画像\"\n          rules=\"image\"\n        >\n          eslint-enable vue/no-unused-vars\n          <label for=\"avatar\" class=\"d-block\">プロフィール画像</label>\n          <img :src=\"user.avatar_url\" class=\"my-3\" width=\"150px\" />\n          <input\n            id=\"avatar\"\n            type=\"file\"\n            class=\"form-control-file\"\n            @change=\"handleChange\"\n          />\n          <span class=\"text-danger\">{{ errors[0] }}</span>\n        </ValidationProvider>\n      </div>\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary\"\n        @click=\"handleSubmit(update)\"\n      >\n        更新\n      </button>\n    </ValidationObserver> -->\n\n    <validation-observer ref=\"observer\" v-slot=\"{ handleSubmit }\">\n      <validation-provider\n        v-slot=\"{ errors }\"\n        name=\"名前\"\n        rules=\"required|max:20\"\n      >\n        <v-text-field\n          v-model=\"user.name\"\n          :counter=\"20\"\n          :error-messages=\"errors\"\n          label=\"名前\"\n          required\n        ></v-text-field>\n      </validation-provider>\n      <!-- <v-file-input\n        v-model=\"uploadAvatar\"\n        :rules=\"rules\"\n        accept=\"image/png, image/jpeg, image/bmp\"\n        placeholder=\"Pick an avatar\"\n        prepend-icon=\"mdi-camera\"\n        label=\"プロフィール画像\"\n      ></v-file-input> -->\n      <v-file-input v-model=\"uploadAvatar\">\n      </v-file-input>\n      <!-- <input\n          id=\"avatar\"\n          type=\"file\"\n          class=\"form-control-file\"\n          @change=\"handleChange\"\n        />\n        <span class=\"text-danger\">{{ errors[0] }}</span> -->\n\n      <v-btn class=\"mr-4\" type=\"submit\" @click=\"handleSubmit(update)\"\n        >更新する\n      </v-btn>\n      <v-btn :to=\"{ name: 'ProfileIndex' }\">キャンセル</v-btn>\n    </validation-observer>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from \"vuex\";\n\nexport default {\n  name: \"ProfileEdit\",\n  data() {\n    return {\n      user: {\n        name: \"\",\n        avatar_url: \"\",\n      },\n      uploadAvatar: \"\",\n      rules: [\n        (value) =>\n          !value || value.size < 2000000 || \"画像サイズは2MB以下にしてください\",\n      ],\n    };\n  },\n\n  computed: {\n    ...mapGetters(\"users\", [\"authUser\"]),\n  },\n  created() {\n    this.user = Object.assign({}, this.authUser);\n    console.log(this.user)\n  },\n  methods: {\n    ...mapActions(\"users\", [\"updateUser\"]),\n    // async handleChange(event) {\n    //   const { valid } = await this.$refs.provider.validate(event);\n    //   if (valid) this.uploadAvatar = event.target.files[0];\n    // },\n    update() {\n      const formData = new FormData();\n      formData.append(\"user[name]\", this.user.name);\n      if (this.uploadAvatar) formData.append(\"user[avatar]\", this.uploadAvatar);\n\n      try {\n        this.updateUser(formData);\n        this.$router.push({ name: \"ProfileIndex\" });\n      } catch (error) {\n        console.log(error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module"}