{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { mapGetters, mapActions } from \"vuex\";\nexport default {\n  name: \"Communication\",\n  data: function data() {\n    var _this = this;\n    return {\n      communicate: this.communication_subordinates.some(function (obj) {\n        return obj.id === _this.subordinate.id;\n      })\n    };\n  },\n  props: {\n    communication_subordinates: {\n      type: Array,\n      required: true\n    },\n    subordinate: {\n      type: Object,\n      required: true\n    }\n  },\n  created: function created() {\n    console.log(this.communicate);\n    console.log(this.subordinate.id);\n    // console.log(this.communication_subordinates.forEach((va) => va.id));\n    console.log(this.communication_subordinates);\n    console.log(this.fetchCommunications());\n  },\n  computed: _objectSpread({}, mapGetters(\"communications\", [\"communications\"])),\n  methods: _objectSpread(_objectSpread({}, mapActions(\"communications\", [\"fetchCommunications\"])), {}, {\n    handleCreateCommunication: function handleCreateCommunication(communication_subordinate) {\n      this.$emit(\"create-communication\", communication_subordinate);\n      this.communicate = true;\n    },\n    handleDeleteCommunication: function handleDeleteCommunication(communication_subordinate) {\n      this.$emit(\"delete-communication\", communication_subordinate);\n      this.communicate = false;\n    }\n  })\n};","map":{"version":3,"mappings":";;;AAkBA;AACA;EACAA;EACAC;IAAA;IACA;MACAC;QACA;MACA;IACA;EACA;EAEAC;IACAC;MACAC;MACAC;IACA;IACAC;MACAF;MACAC;IACA;EACA;EAEAE;IACAC;IACAA;IACA;IACAA;IACAA;EACA;EAEAC,4BACAC,iDACA;EAEAC,yCACAC;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;EAAA;AAEA","names":["name","data","communicate","props","communication_subordinates","type","required","subordinate","created","console","computed","mapGetters","methods","mapActions","handleCreateCommunication","handleDeleteCommunication"],"sourceRoot":"app/javascript/pages/components","sources":["Communication.vue"],"sourcesContent":["<template>\n  <div>\n    {{ communicate }}\n    <v-btn\n      v-if=\"communicate\"\n      icon\n      color=\"pink\"\n      @click=\"handleDeleteCommunication(subordinate)\"\n    >\n      <v-icon>mdi-heart</v-icon>\n    </v-btn>\n    <v-btn v-else icon @click=\"handleCreateCommunication(subordinate)\">\n      <v-icon>mdi-heart</v-icon>\n    </v-btn>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from \"vuex\";\nexport default {\n  name: \"Communication\",\n  data() {\n    return {\n      communicate: this.communication_subordinates.some((obj) => {\n        return obj.id === this.subordinate.id;\n      }),\n    };\n  },\n\n  props: {\n    communication_subordinates: {\n      type: Array,\n      required: true,\n    },\n    subordinate: {\n      type: Object,\n      required: true,\n    },\n  },\n\n  created() {\n    console.log(this.communicate);\n    console.log(this.subordinate.id);\n    // console.log(this.communication_subordinates.forEach((va) => va.id));\n    console.log(this.communication_subordinates);\n    console.log(this.fetchCommunications());\n  },\n\n  computed: {\n    ...mapGetters(\"communications\", [\"communications\"]),\n  },\n\n  methods: {\n    ...mapActions(\"communications\", [\"fetchCommunications\"]),\n    handleCreateCommunication(communication_subordinate) {\n      this.$emit(\"create-communication\", communication_subordinate);\n      this.communicate = true;\n    },\n    handleDeleteCommunication(communication_subordinate) {\n      this.$emit(\"delete-communication\", communication_subordinate);\n      this.communicate = false;\n    },\n  },\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module"}