{"ast":null,"code":"function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport SubordinateDetailItem from \"../components/SubordinateDetailItem\";\nimport SubordinateEditModal from \"../components/SubordinateEditModal\";\nexport default {\n  components: {\n    SubordinateDetailItem: SubordinateDetailItem,\n    SubordinateEditModal: SubordinateEditModal\n  },\n  name: \"SubordinateDetail\",\n  data: function data() {\n    return {\n      subordinate: {},\n      isVisibleSubordinateEditModal: false,\n      subordinateEdit: {}\n    };\n  },\n  created: function created() {\n    this.showSubordinate();\n  },\n  methods: {\n    showSubordinate: function showSubordinate() {\n      var _this = this;\n      var id = parseInt(this.$route.params.id, 10);\n      this.$axios.get(\"subordinates/\" + id).then(function (res) {\n        return _this.subordinate = res.data;\n      })[\"catch\"](function (err) {\n        return console.log(err.status);\n      });\n    },\n    handleShowSubordinateEditModal: function handleShowSubordinateEditModal(subordinate) {\n      this.subordinateEdit = Object.assign({}, subordinate);\n      this.isVisibleSubordinateEditModal = true;\n    },\n    handleCloseSubordinateEditModal: function handleCloseSubordinateEditModal() {\n      this.isVisibleSubordinateEditModal = false;\n      this.subordinateEdit = {};\n    },\n    updateSubordinate: function updateSubordinate(subordinate) {\n      var _this2 = this;\n      var target_subordinate = this.subordinate.id;\n      this.$axios.patch(\"subordinates/\" + target_subordinate, subordinate).then(function (res) {\n        _this2.$store.commit(\"subordinates/updateSubordinate\", res.data);\n        _this2.$router.go({\n          path: _this2.$router.currentRoute.path,\n          force: true\n        });\n      });\n    },\n    handleUpdateSubordinate: function handleUpdateSubordinate(subordinate) {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this3.updateSubordinate(subordinate);\n              case 3:\n                _this3.handleCloseSubordinateEditModal();\n                _context.next = 9;\n                break;\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 6]]);\n      }))();\n    },\n    deleteSubordinate: function deleteSubordinate() {\n      var _this4 = this;\n      var target_subordinate = this.subordinate.id;\n      if (confirm(\"削除してよろしいですか?\")) {\n        this.$axios[\"delete\"](\"subordinates/\" + target_subordinate).then(function (res) {\n          _this4.$store.commit(\"subordinates/deleteSubordinate\", res.data);\n          _this4.$router.back();\n        });\n      } else {\n        this.$router.push({\n          name: \"SubordinateIndex\"\n        });\n      }\n    },\n    handleDeleteSubordinate: function handleDeleteSubordinate() {\n      var _this5 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return _this5.deleteSubordinate();\n              case 3:\n                _context2.next = 8;\n                break;\n              case 5:\n                _context2.prev = 5;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 5]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":"+CA2CA;AAAA;AAAA;AAAA;AACA;AAEA;EACAA;IACAC;IACAC;EACA;EAEAC;EAEAC;IACA;MACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACA;EACA;EAEAC;IACAC;MAAA;MACA;MACA,YACAC,0BACAC;QAAA;MAAA,WACA;QAAA;MAAA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MAAA;MACA;MACA,YACAC,yDACAJ;QACA;QACA;UACAK;UACAC;QACA;MACA;IACA;IACAC;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAEA;cAAA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IACAC;MAAA;MACA;MACA;QACA;UACA;UACA;QACA;MACA;QACA;UAAAlB;QAAA;MACA;IACA;IACAmB;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAEA;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAF;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;EACA;AACA","names":["components","SubordinateDetailItem","SubordinateEditModal","name","data","subordinate","isVisibleSubordinateEditModal","subordinateEdit","created","methods","showSubordinate","get","then","handleShowSubordinateEditModal","handleCloseSubordinateEditModal","updateSubordinate","patch","path","force","handleUpdateSubordinate","console","deleteSubordinate","handleDeleteSubordinate"],"sourceRoot":"app/javascript/pages/subordinate","sources":["index.vue"],"sourcesContent":["<template>\n  <div>\n    <div style=\"position: relative\">\n      <SubordinateDetailItem :subordinate=\"subordinate\" />\n      <div style=\"position: absolute; right: 30px; top: 100px\">\n        <div style=\"display: flex\">\n          <div>\n            <v-btn\n              color=\"primary\"\n              fab\n              small\n              dark\n              @click=\"handleShowSubordinateEditModal(subordinate)\"\n            >\n              <v-icon>mdi-pencil</v-icon>\n            </v-btn>\n          </div>\n\n          <div class=\"ml-2\">\n            <v-btn\n              color=\"error\"\n              fab\n              small\n              dark\n              @click=\"handleDeleteSubordinate\"\n            >\n              <v-icon>mdi-trash-can</v-icon>\n            </v-btn>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div>\n      <SubordinateEditModal\n        :subordinate=\"subordinateEdit\"\n        @close-modal=\"handleCloseSubordinateEditModal\"\n        @update-subordinate=\"handleUpdateSubordinate\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport SubordinateDetailItem from \"../components/SubordinateDetailItem\";\nimport SubordinateEditModal from \"../components/SubordinateEditModal\";\n\nexport default {\n  components: {\n    SubordinateDetailItem,\n    SubordinateEditModal,\n  },\n\n  name: \"SubordinateDetail\",\n\n  data() {\n    return {\n      subordinate: {},\n      isVisibleSubordinateEditModal: false,\n      subordinateEdit: {},\n    };\n  },\n\n  created() {\n    this.showSubordinate();\n  },\n\n  methods: {\n    showSubordinate() {\n      const id = parseInt(this.$route.params.id, 10);\n      this.$axios\n        .get(\"subordinates/\" + id)\n        .then((res) => (this.subordinate = res.data))\n        .catch((err) => console.log(err.status));\n    },\n    handleShowSubordinateEditModal(subordinate) {\n      this.subordinateEdit = Object.assign({}, subordinate);\n      this.isVisibleSubordinateEditModal = true;\n    },\n    handleCloseSubordinateEditModal() {\n      this.isVisibleSubordinateEditModal = false;\n      this.subordinateEdit = {};\n    },\n    updateSubordinate(subordinate) {\n      const target_subordinate = this.subordinate.id;\n      this.$axios\n        .patch(\"subordinates/\" + target_subordinate, subordinate)\n        .then((res) => {\n          this.$store.commit(\"subordinates/updateSubordinate\", res.data);\n          this.$router.go({\n            path: this.$router.currentRoute.path,\n            force: true,\n          });\n        });\n    },\n    async handleUpdateSubordinate(subordinate) {\n      try {\n        await this.updateSubordinate(subordinate);\n        this.handleCloseSubordinateEditModal();\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    deleteSubordinate() {\n      const target_subordinate = this.subordinate.id;\n      if (confirm(\"削除してよろしいですか?\")) {\n        this.$axios.delete(\"subordinates/\" + target_subordinate).then((res) => {\n          this.$store.commit(\"subordinates/deleteSubordinate\", res.data);\n          this.$router.back();\n        });\n      } else {\n        this.$router.push({ name: \"SubordinateIndex\" });\n      }\n    },\n    async handleDeleteSubordinate() {\n      try {\n        await this.deleteSubordinate();\n      } catch (error) {\n        console.log(error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module"}